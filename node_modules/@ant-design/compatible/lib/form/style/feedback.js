"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.genFeedbackStyle = void 0;

var _mixin = require("./mixin");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// export const showHelpMotion = (
//   className: string,
//   inKeyframes: Keyframes,
//   outKeyframes: Keyframes,
//   duration: string,
// ): CSSObject => {
//   return {
//     //   .make-motion(@className, @keyframeName, @duration);
//     ...(initMotion(className, inKeyframes, outKeyframes, duration) as any),
//     [`.${className}-enter, .${className}-appear`]: {
//       opacity: 0,
//       // animation-timing-function: @ease-in-out;
//     },
//     [`.${className}-leave`]: {
//       // animation-timing-function: @ease-in-out;
//     },
//   };
// };
// export const helpIn = new Keyframes('legacyAntShowHelpIn', {
//   '0%': {
//     transform: 'translateY(-5px)',
//     opacity: '0',
//   },
//   '100%': {
//     transform: 'translateY(0)',
//     opacity: '1',
//   },
// });
// export const helpOut = new Keyframes('legacyAntShowHelpOut', {
//   to: {
//     transform: 'translateY(-5px)',
//     opacity: '0',
//   },
// });
var genFeedbackStyle = function genFeedbackStyle(token) {
  var _componentCls;

  var componentCls = token.componentCls,
      colorSuccess = token.colorSuccess,
      colorInfo = token.colorInfo,
      colorWarning = token.colorWarning,
      colorError = token.colorError;
  return _defineProperty({}, componentCls, (_componentCls = {}, _defineProperty(_componentCls, "".concat(componentCls, "-item-feedback-icon-success"), {
    color: colorSuccess
  }), _defineProperty(_componentCls, "".concat(componentCls, "-item-feedback-icon-validating"), {
    color: colorInfo
  }), _defineProperty(_componentCls, "".concat(componentCls, "-item-feedback-icon-warning"), {
    color: colorWarning
  }), _defineProperty(_componentCls, "".concat(componentCls, "-item-feedback-icon-error"), {
    color: colorError
  }), _defineProperty(_componentCls, '.has-warning', _objectSpread({}, (0, _mixin.genFormControlValidation)(componentCls, colorWarning))), _defineProperty(_componentCls, '.has-error', _objectSpread({}, (0, _mixin.genFormControlValidation)(componentCls, colorError))), _componentCls));
};

exports.genFeedbackStyle = genFeedbackStyle;